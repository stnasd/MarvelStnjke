{"version":3,"sources":["components/pages/singleCharPage.js","components/hooks/http.hook.js","services/MarvelService.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["View","char","thumbnail","name","description","content","className","src","alt","to","style","SingleCharPage","useState","setChar","character","useParams","useMarvelService","error","loading","getCharacter","clearError","useEffect","updateCharacter","then","onCharLoaded","div","initial","width","animate","exit","x","window","innerWidth","transition","duration","useHttp","setLoading","setError","process","setProcess","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","id","getCharacterByName","getAllComics","_transformComics","getComic","path","extension","homepage","urls","wiki","comics","items","comicsUrls","resourceURI","item","title","pageCount","language","textObjects","price","prices","AppBanner","avengers","avengersLogo"],"mappings":"gNA8CMA,EAAO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACJC,EAAiCD,EAAjCC,UAAWC,EAAsBF,EAAtBE,KAAMC,EAAgBH,EAAhBG,YACzB,OACI,qCACI,eAAC,IAAD,WACI,sBACID,KAAK,cACLE,QAAO,UAAKF,EAAL,gBAEX,gCAAQA,OAEZ,sBAAKG,UAAU,cAAf,UACI,qBAAKC,IAAKL,EAAWM,IAAKL,EAAMG,UAAU,qBAC1C,sBAAKA,UAAU,oBAAf,UACI,oBAAIA,UAAU,oBAAd,SAAmCH,IACnC,mBAAGG,UAAU,qBAAb,SAAmCF,OAEvC,cAAC,IAAD,CAAMK,GAAG,IAAIH,UAAU,oBACnBI,MAAO,CAAE,MAAQ,WADrB,iCAUDC,UA7DQ,WACnB,MAAwBC,mBAAS,MAAjC,mBAAOX,EAAP,KAAaY,EAAb,KAEQC,EAAcC,cAAdD,UAER,EAAqDE,cAA7CC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,QAASC,EAAxB,EAAwBA,aAAcC,EAAtC,EAAsCA,WAEtCC,qBAAU,WACNC,MACD,CAACR,IAEJ,IAAMQ,EAAkB,WACpBF,IACAD,EAAaL,GACRS,KAAKC,IAGRA,EAAe,SAACvB,GAClBY,EAAQZ,IAENI,EAAYa,GAAWD,IAAUhB,EAA+B,KAAvB,cAACD,EAAD,CAAMC,KAAMA,IAC3D,OACI,eAAC,SAAOwB,IAAR,CACIC,QAAS,CAAEC,MAAO,GAClBC,QAAS,CAAED,MAAO,QAClBE,KAAM,CAAEC,EAAGC,OAAOC,WAAYC,WAAY,CAAEC,SAAU,KAH1D,UAII,cAAC,IAAD,IACC7B,O,yECpCA8B,EAAU,WACnB,MAA8BvB,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBkB,EAAhB,KACA,EAA0BxB,mBAAS,MAAnC,mBAAOK,EAAP,KAAcoB,EAAd,KACA,EAA8BzB,mBAAS,WAAvC,mBAAO0B,EAAP,KAAgBC,EAAhB,KA6BA,MAAO,CAAEC,QA1BOC,sBAAW,uCAAC,WAAOC,GAAP,mCAAAC,EAAA,6DAAYC,EAAZ,+BAAqB,MAAOC,EAA5B,+BAAmC,KAAMC,EAAzC,+BAAmD,CAAE,eAAgB,mBAE7FV,GAAW,GACXG,EAAW,WAHa,kBAKGQ,MAAML,EAAK,CAAEE,SAAQE,UAASD,SALjC,WAKdG,EALc,QAMNC,GANM,uBAOV,IAAIC,MAAJ,0BAA6BR,EAA7B,qBAA6CM,EAASG,SAP5C,yBASDH,EAASI,OATR,eASdC,EATc,OAWpBjB,GAAW,GAXS,kBAYbiB,GAZa,wCAcpBjB,GAAW,GACXC,EAAS,KAAEiB,SACXf,EAAW,SAhBS,+DAAD,sDAmBxB,IAOerB,UAASD,QAAOG,WALfqB,uBAAY,WAC3BJ,EAAS,MACTE,EAAW,aACZ,IAE2CD,UAASC,eCgD5CvB,IAhFU,WACrB,MAAqEmB,IAA7DjB,EAAR,EAAQA,QAASsB,EAAjB,EAAiBA,QAASvB,EAA1B,EAA0BA,MAAOG,EAAjC,EAAiCA,WAAYkB,EAA7C,EAA6CA,QAASC,EAAtD,EAAsDA,WAChDgB,EAAW,4CAGXC,EAAU,0CAKVC,EAAgB,uCAAG,0CAAAd,EAAA,6DAAOe,EAAP,+BAJL,IAIK,SACHlB,EAAQ,GAAD,OAAIe,EAAJ,qCAAyCG,EAAzC,YAAmDF,IADvD,cACfG,EADe,OAErBvC,IAFqB,kBAGduC,EAAIN,KAAKO,QAAQC,IAAIC,IAHP,2CAAH,qDAMhB3C,EAAY,uCAAG,WAAO4C,GAAP,eAAApB,EAAA,sEACCH,EAAQ,GAAD,OAAIe,EAAJ,sBAA0BQ,EAA1B,cAAkCP,IAD1C,cACXG,EADW,OAEjBvC,IAFiB,kBAGV0C,EAAoBH,EAAIN,KAAKO,QAAQ,KAH3B,2CAAH,sDAKZI,EAAkB,uCAAG,WAAO7D,GAAP,eAAAwC,EAAA,sEACLH,EAAQ,GAAD,OAAIe,EAAJ,2BAA+BpD,EAA/B,YAAuCqD,IADzC,cACjBG,EADiB,yBAEhBA,EAAIN,KAAKO,QAAQC,IAAIC,IAFL,2CAAH,sDAKlBG,EAAY,uCAAG,0CAAAtB,EAAA,6DAAOe,EAAP,+BAnBE,IAmBF,SACClB,EAAQ,GAAD,OAAIe,EAAJ,iCAAqCG,EAArC,YAA+CF,IADvD,cACXG,EADW,OAEjBvC,IAFiB,kBAGVuC,EAAIN,KAAKO,QAAQC,IAAIK,IAHX,2CAAH,qDAKZC,EAAQ,uCAAG,WAAOJ,GAAP,eAAApB,EAAA,sEACKH,EAAQ,GAAD,OAAIe,EAAJ,kBAAsBQ,EAAtB,cAA8BP,IAD1C,cACPG,EADO,OAEbvC,IAFa,kBAGN8C,EAAiBP,EAAIN,KAAKO,QAAQ,KAH5B,2CAAH,sDAMRE,EAAsB,SAAC7D,GACzB,MAAO,CACHE,KAAMF,EAAKE,KACXC,YAAaH,EAAKG,YAClBF,UAAWD,EAAKC,UAAUkE,KAAO,IAAMnE,EAAKC,UAAUmE,UACtDC,SAAUrE,EAAKsE,KAAK,GAAG7B,IACvB8B,KAAMvE,EAAKsE,KAAK,GAAG7B,IACnBqB,GAAI9D,EAAK8D,GACTU,OAAQxE,EAAKwE,OAAOC,MACpBC,WAAY1E,EAAKwE,OAAOC,MAAME,cAIhCV,EAAmB,SAACW,GAAU,IAAD,EAC/B,MAAO,CACH1E,KAAM0E,EAAKC,MACX1E,YAAayE,EAAKzE,aAAe,0BACjC2E,UAAWF,EAAKE,UAAL,UACFF,EAAKE,UADH,UAEL,2CACNC,UAAU,UAAAH,EAAKI,YAAY,UAAjB,eAAqBD,WAAY,QAC3C9E,UAAW2E,EAAK3E,UAAUkE,KAAO,IAAMS,EAAK3E,UAAUmE,WAAa,KACnEa,MAAOL,EAAKM,OAAO,GAAGD,MAAf,UAA0BL,EAAKM,OAAO,GAAGD,MAAzC,WAAqD,gBAC5DnB,GAAIc,EAAKd,KAGjB,MAAO,CACH7C,UACAD,QACAwC,mBACAtC,eACAC,aACA6C,eACAE,WACAH,qBACA1B,UACAC,gB,+DC5EO,MAA0B,qCCA1B,MAA0B,0C,OCiB1B6C,IAbG,WACd,OACI,sBAAK9E,UAAU,cAAf,UACI,qBAAKC,IAAK8E,EAAU7E,IAAI,aACxB,sBAAKF,UAAU,mBAAf,mCAC0B,uBAD1B,iBAIA,qBAAKC,IAAK+E,EAAc9E,IAAI","file":"static/js/8.ff6e745b.chunk.js","sourcesContent":["import useMarvelService from '../../services/MarvelService';\r\nimport AppBanner from '../appBanner/AppBanner';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet'\r\nimport { motion } from \"framer-motion/dist/framer-motion\"\r\n\r\nimport './singleCharPage.scss'\r\n\r\n\r\n\r\nconst SingleCharPage = () => {\r\n    const [char, setChar] = useState(null);\r\n\r\n    const { character } = useParams();\r\n\r\n    const { error, loading, getCharacter, clearError } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateCharacter()\r\n    }, [character])\r\n\r\n    const updateCharacter = () => {\r\n        clearError()\r\n        getCharacter(character)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char)\r\n    }\r\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\r\n    return (\r\n        <motion.div\r\n            initial={{ width: 0 }}\r\n            animate={{ width: '100%' }}\r\n            exit={{ x: window.innerWidth, transition: { duration: 0.5 } }}>\r\n            <AppBanner />\r\n            {content}\r\n        </motion.div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst View = ({ char }) => {\r\n    const { thumbnail, name, description } = char;\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content={`${name} char page`}\r\n                />\r\n                <title>{name}</title>\r\n            </Helmet>\r\n            <div className=\"single-char\" >\r\n                <img src={thumbnail} alt={name} className=\"single-char__img\" />\r\n                <div className=\"single-char__info\">\r\n                    <h2 className=\"single-char__name\">{name}</h2>\r\n                    <p className=\"single-char__descr\">{description}</p>\r\n                </div>\r\n                <Link to=\"/\" className=\"single-char__back\"\r\n                    style={{ 'color': `#9f0013` }}\r\n                >Back to Main</Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default SingleCharPage;","import { useState, useCallback } from \"react\"\r\n\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting')\r\n\r\n\r\n    const request = useCallback(async (url, method = \"GET\", body = null, headers = { \"Content-Type\": \"aplication/json\" }) => {\r\n\r\n        setLoading(true);\r\n        setProcess('loading');\r\n        try {\r\n            const response = await fetch(url, { method, headers, body });\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            setProcess('error')\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('loading');\r\n    }, [])\r\n\r\n    return { request, loading, error, clearError, process, setProcess }\r\n}\r\n\r\n\r\nexport default useHttp;","import { useHttp } from \"../components/hooks/http.hook\"\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError, process, setProcess } = useHttp();\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    // const _apiKey = 'apikey=f63df0e0ac6280a04a78500411b53931';\r\n    // const _apiKey = 'apikey=7dae8a44fd3de105d0687f0c9cff2944';\r\n    const _apiKey = 'apikey=e3432be01e1b4538a1a106d69d953f2d';\r\n    const _baseOffSet = 200;\r\n    const _baseOffSetCom = 300;\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffSet) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\r\n        clearError()\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?/&${_apiKey}`)\r\n        clearError()\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getAllComics = async (offset = _baseOffSetCom) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`)\r\n        clearError()\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?/&${_apiKey}`)\r\n        clearError()\r\n        return _transformComics(res.data.results[0])\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items,\r\n            comicsUrls: char.comics.items.resourceURI,\r\n        }\r\n    }\r\n\r\n    const _transformComics = (item) => {\r\n        return {\r\n            name: item.title,\r\n            description: item.description || \"There is no description\",\r\n            pageCount: item.pageCount\r\n                ? `${item.pageCount} pages`\r\n                : \"No information about the number of pages\",\r\n            language: item.textObjects[0]?.language || \"en-us\",\r\n            thumbnail: item.thumbnail.path + '.' + item.thumbnail.extension || null,\r\n            price: item.prices[0].price ? `${item.prices[0].price} €` : \"not available\",\r\n            id: item.id\r\n        }\r\n    }\r\n    return {\r\n        loading,\r\n        error,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        clearError,\r\n        getAllComics,\r\n        getComic,\r\n        getCharacterByName,\r\n        process,\r\n        setProcess\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n// ___________","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}