{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/comicsPage.js","components/errorMessenge/13315300_5203299.jpg","components/errorMessenge/errorMessenge.js","components/hooks/http.hook.js","services/MarvelService.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/errorBoundary/ErrorBoundary.js"],"names":["ComicsList","useState","data","setData","offset","setOffset","newComics","setNewComics","comicsEnded","setComicsEnded","useMarvelService","error","loading","getAllComics","useEffect","onRequest","initial","then","onComicsLoaded","ended","length","items","map","item","i","id","thumbnail","name","price","truePrice","CSSTransition","classNames","timeout","alt","className","to","src","spinner","hiddenButton","ifError","TransitionGroup","component","onClick","style","ComicsPage","Helmet","content","div","width","animate","exit","x","window","innerWidth","transition","duration","AppBanner","ErrorMessenge","img","useHttp","setLoading","setError","process","setProcess","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","message","clearError","_apiBase","_apiKey","getAllCharacters","res","results","_transformCharacter","getCharacter","getCharacterByName","_transformComics","getComic","char","description","path","extension","homepage","urls","wiki","comics","comicsUrls","resourceURI","title","pageCount","language","textObjects","prices","avengers","avengersLogo","ErrorBoundary","state","errorInfo","console","log","this","setState","props","children","Component"],"mappings":"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","file":"static/js/6.3ebf68db.chunk.js","sourcesContent":["import './comicsList.scss';\nimport Spinner from '../spinner/spinner';\nimport useMarvelService from '../../services/MarvelService';\nimport { useEffect, useState } from 'react';\nimport ErrorMessenge from '../errorMessenge/errorMessenge';\nimport { Link } from \"react-router-dom\"\nimport {\n    CSSTransition,\n    TransitionGroup,\n} from 'react-transition-group';\n\nconst ComicsList = () => {\n    const [data, setData] = useState([]);\n    const [offset, setOffset] = useState(220);\n    const [newComics, setNewComics] = useState(false);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n\n\n    const { error, loading, getAllComics } = useMarvelService();\n\n\n\n    useEffect(() => {\n        onRequest(offset, true)\n    }, [])\n\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewComics(false) : setNewComics(true)\n        getAllComics(offset)\n            .then(onComicsLoaded)\n    }\n\n    const onComicsLoaded = (newComics) => {\n        let ended = false;\n        if (newComics.length < 8) {\n            ended = true;\n        }\n\n        setData([...data, ...newComics]);\n        setOffset(offset => offset + 16);\n        setComicsEnded(ended)\n    }\n\n\n    const items = data.map((item, i) => {\n        const { id, thumbnail, name, price } = item\n        const truePrice = price === 0 ? 'Price not known' : price;\n\n        return (\n            <CSSTransition\n                classNames=\"comics__item\"\n                timeout={700}\n                key={id}\n            >\n                <li key={i} alt={name} className=\"comics__item\" >\n                    <Link to={`/comics/${id}`}>\n                        <img src={thumbnail} alt=\"ultimate war\" className=\"comics__item-img\" />\n                        <div className=\"comics__item-name\">{name}</div>\n                        <div className=\"comics__item-price\">{truePrice}</div>\n                    </Link>\n                </li>\n            </CSSTransition>\n        )\n    })\n\n    const spinner = loading && !newComics ? <Spinner /> : null;\n    const hiddenButton = { 'display': (spinner || comicsEnded ? 'none' : null) }\n    const ifError = error ? <ErrorMessenge /> : null;\n    return (\n        <div className=\"comics__list\">\n            {ifError}\n            {spinner}\n            <ul className=\"comics__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n            <button onClick={() => onRequest(offset)}\n                style={hiddenButton}\n                className=\"button button__main button__long\">\n                <div className=\"inner\" >load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nimport { motion } from \"framer-motion/dist/framer-motion\"\r\nimport { Helmet } from 'react-helmet'\r\n\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with list of our comics\"\r\n                />\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <motion.div\r\n                initial={{ width: 0 }}\r\n                animate={{ width: '100%' }}\r\n                exit={{ x: window.innerWidth, transition: { duration: 0.1 } }}\r\n            >\r\n                <AppBanner />\r\n                <ComicsList />\r\n            </motion.div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ComicsPage;","export default __webpack_public_path__ + \"static/media/13315300_5203299.ce293654.jpg\";","import img from './13315300_5203299.jpg'\r\n\r\nimport './errorMessenge.css'\r\n\r\n\r\n\r\n\r\nconst ErrorMessenge = () => {\r\n    return (\r\n        <img src={img} alt=\"Error\" className=\"error-img\" />\r\n    )\r\n}\r\n\r\n\r\nexport default ErrorMessenge;","import { useState, useCallback } from \"react\"\r\n\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting')\r\n\r\n\r\n    const request = useCallback(async (url, method = \"GET\", body = null, headers = { \"Content-Type\": \"aplication/json\" }) => {\r\n\r\n        setLoading(true);\r\n        setProcess('loading');\r\n        try {\r\n            const response = await fetch(url, { method, headers, body });\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            setProcess('error')\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('loading');\r\n    }, [])\r\n\r\n    return { request, loading, error, clearError, process, setProcess }\r\n}\r\n\r\n\r\nexport default useHttp;","import { useHttp } from \"../components/hooks/http.hook\"\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError, process, setProcess } = useHttp();\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    // const _apiKey = 'apikey=f63df0e0ac6280a04a78500411b53931';\r\n    // const _apiKey = 'apikey=7dae8a44fd3de105d0687f0c9cff2944';\r\n    const _apiKey = 'apikey=e3432be01e1b4538a1a106d69d953f2d';\r\n    const _baseOffSet = 200;\r\n    const _baseOffSetCom = 300;\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffSet) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\r\n        clearError()\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?/&${_apiKey}`)\r\n        clearError()\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getAllComics = async (offset = _baseOffSetCom) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`)\r\n        clearError()\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?/&${_apiKey}`)\r\n        clearError()\r\n        return _transformComics(res.data.results[0])\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items,\r\n            comicsUrls: char.comics.items.resourceURI,\r\n        }\r\n    }\r\n\r\n    const _transformComics = (item) => {\r\n        return {\r\n            name: item.title,\r\n            description: item.description || \"There is no description\",\r\n            pageCount: item.pageCount\r\n                ? `${item.pageCount} pages`\r\n                : \"No information about the number of pages\",\r\n            language: item.textObjects[0]?.language || \"en-us\",\r\n            thumbnail: item.thumbnail.path + '.' + item.thumbnail.extension || null,\r\n            price: item.prices[0].price ? `${item.prices[0].price} €` : \"not available\",\r\n            id: item.id\r\n        }\r\n    }\r\n    return {\r\n        loading,\r\n        error,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        clearError,\r\n        getAllComics,\r\n        getComic,\r\n        getCharacterByName,\r\n        process,\r\n        setProcess\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n// ___________","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { Component } from \"react\";\r\nimport ErrorMessenge from \"../errorMessenge/errorMessenge\";\r\n\r\n\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({ error: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return (\r\n                <ErrorMessenge />\r\n            )\r\n        }\r\n        return (\r\n            this.props.children\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;"],"sourceRoot":""}