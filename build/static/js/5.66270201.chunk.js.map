{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","utils/setContnent.js","components/charInfo/CharInfo.js","components/charSerch/CharSerch.js","components/charInfoBlock/CharInfoBlock.js","resources/img/vision.png","components/pages/mainPage.js","components/errorMessenge/13315300_5203299.jpg","components/errorMessenge/errorMessenge.js","components/hooks/http.hook.js","services/MarvelService.js","components/errorBoundary/ErrorBoundary.js"],"names":["View","char","name","description","thumbnail","wiki","homepage","id","classImg","className","src","alt","to","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","upgradeChar","onCharLoaded","newChar","length","slice","Math","floor","random","then","errorMessenge","spinner","content","onClick","mjolnir","CharList","props","chars","setChars","newCharsLoading","setNewCharsLoading","offset","setOffset","setCharEnded","getAllCharacters","process","setProcess","onRequest","initial","onCharsLoaded","newChars","ended","itemRefs","useRef","focusItem","i","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Error","setContent","arr","items","map","CSSTransition","classNames","timeout","ref","el","tabIndex","onKeyDown","e","key","onSelectedChar","TransitionGroup","component","charElements","disabled","Skeleton","data","comics","url","resourceURI","match","style","CharInfo","updateChar","charId","CharSerch","getCharacterByName","errorMessage","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","CharInfoBlock","MainPage","selectedChar","setSelectedChar","Helmet","div","width","animate","exit","x","window","innerWidth","transition","duration","ErrorBoundary","decoration","ErrorMessenge","img","useHttp","setLoading","setError","request","useCallback","a","method","body","headers","fetch","response","ok","status","json","message","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","path","extension","urls","comicsUrls","title","pageCount","language","textObjects","price","prices","state","errorInfo","console","log","this","setState","children"],"mappings":"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","file":"static/js/5.66270201.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useEffect, useState } from 'react';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessenge from '../errorMessenge/errorMessenge';\nimport { Link } from 'react-router-dom';\n\nimport './randomChar.scss';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        upgradeChar();\n    }, [])\n\n    const onCharLoaded = (char) => {\n        const newChar = char;\n        if (!char.description) {\n            newChar.description = 'Description of this character is not complete yet...'\n        } else if (newChar.description.length > 180) {\n            newChar.description = newChar.description.slice(0, 180) + '...';\n        }\n        setChar(newChar);\n    }\n\n\n    const upgradeChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011100);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n\n    const errorMessenge = error ? <ErrorMessenge /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error) ? <View char={char} /> : null;\n\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessenge}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\">\n                    <div className=\"inner\" onClick={upgradeChar}>try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, id } = char;\n    const verificationPageUrl = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg';\n    const classImg = (verificationPageUrl === thumbnail) ? '-default' : '';\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className={`randomchar__img${classImg}`} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <Link to={`/characters/${id}`} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </Link>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div >\n    )\n}\n\nexport default RandomChar;","import './charList.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessenge from '../errorMessenge/errorMessenge';\nimport PropTypes from 'prop-types';\nimport {\n    CSSTransition,\n    TransitionGroup,\n} from 'react-transition-group';\n\n\n\nimport { useState, useEffect, useRef, useMemo } from 'react';\n\nconst setContent = (process, Component, newCharsLoading) => {\n    switch (process) {\n        case \"waiting\":\n            return <Spinner />\n            break;\n        case \"loading\":\n            return newCharsLoading ? <Component /> : <Spinner />\n            break;\n        case \"confirmed\":\n            return <Component />\n            break;\n        case \"error\":\n            return <ErrorMessenge />\n            break;\n        default:\n            throw new Error('Unxpected process state')\n    }\n}\n\nconst CharList = (props) => {\n\n    const [chars, setChars] = useState([]);\n    const [newCharsLoading, setNewCharsLoading] = useState(false);\n    const [offset, setOffset] = useState(200);\n    const [charsEnded, setCharEnded] = useState(false);\n\n\n    const { getAllCharacters, loading, error, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewCharsLoading(false) : setNewCharsLoading(true);\n        getAllCharacters(offset)\n            .then(onCharsLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n\n\n    const onCharsLoaded = (newChars) => {\n        let ended = false;\n        if (newChars.length < 9) {\n            ended = true;\n        }\n\n        setChars([...chars, ...newChars]);\n        setNewCharsLoading(newCharsLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended);\n    }\n\n\n    const itemRefs = useRef([])\n\n\n    const focusItem = (i) => {\n        itemRefs.current.forEach((item) => {\n            item.classList.remove('char__item_selected');\n        })\n        itemRefs.current[i].classList.add('char__item_selected');\n        itemRefs.current[i].focus();\n    }\n\n    const charElements = (arr) => {\n        const items = arr.map((item, i) => {\n            const { thumbnail, name, id } = item;\n            const classImg = (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') ? \"char__img-default\" : '';\n            return (\n                <CSSTransition\n                    classNames=\"char__item\"\n                    timeout={700}\n                    key={id}\n                >\n                    <li className=\"char__item\"\n                        ref={el => itemRefs.current[i] = el}\n                        key={id}\n                        tabIndex={0}\n                        onKeyDown={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onSelectedChar(id);\n                                focusItem(i);\n                            }\n                        }}\n                        onClick={() => {\n                            props.onSelectedChar(id);\n                            focusItem(i);\n                        }}\n                    >\n                        <img src={thumbnail} alt={name} className={classImg} />\n                        <div className=\"char__name\">{name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        })\n        return <ul className=\"char__grid\">\n            <TransitionGroup component={null}>\n                {items}\n            </TransitionGroup>\n        </ul>\n    }\n    // const items = charElements(chars);\n\n    // const spinner = loading && !newCharsLoading ? <Spinner /> : null;\n    // const errorMessage = error ? <ErrorMessenge /> : null;\n    // const offButton = newCharsLoading ? { 'display': 'disabled' } : null;\n\n    const elements = useMemo(() => {\n        return setContent(process, () => charElements(chars), newCharsLoading)\n        // eslint-disable-next-line\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}\n                disabled={newCharsLoading}\n            >\n                <div className=\"inner\">load more</div>\n            </button >\n        </div >\n    )\n}\n\nCharList.propTypes = {\n    onSelectedChar: PropTypes.func\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/spinner';\r\nimport ErrorMessenge from '../components/errorMessenge/errorMessenge';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case \"waiting\":\r\n            return <Skeleton />\r\n            break;\r\n        case \"loading\":\r\n            return <Spinner />\r\n            break;\r\n        case \"confirmed\":\r\n            return <Component data={data} />\r\n            break;\r\n        case \"error\":\r\n            return <ErrorMessenge />\r\n            break;\r\n        default:\r\n            throw new Error('Unxpected process state')\r\n    }\r\n}\r\n\r\nexport default setContent;","import useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContnent';\nimport PropTypes from 'prop-types'\nimport { useState, useEffect } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\n\nimport './charInfo.scss';\n\n\n\n\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n\n\n    return (\n        <>\n            <div className=\"char__info\">\n                {setContent(process, View, char)}\n            </div>\n        </>\n    )\n}\n\n\nconst View = ({ data }) => {\n    const { name, thumbnail, wiki, homepage, description, comics } = data;\n    const classImg = (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') ? \"char__img-default\" : '';\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} className={classImg} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'No comics found for this character'}\n                {\n                    comics.map((item, i) => {\n                        if (i > 9) return null;\n                        const url = item.resourceURI.match(/\\d{2,6}/)\n                        return (\n                            <Link key={i} className=\"char__comics-item\" style={{ 'fontWeight': '600', }}\n                                to={`/comics/${url[0]}`}\n                            >\n                                {item.name}\n                            </Link>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport { useState } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessenge/errorMessenge';\r\nimport * as Yup from 'yup'\r\n\r\nimport './charSerch.scss'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nconst CharSerch = (props) => {\r\n    const [char, setChar] = useState(null);\r\n    const { loading, error, getCharacterByName, clearError } = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n            <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div> :\r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({ charName }) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder=\"Enter name\" />\r\n                        <button\r\n                            type='submit'\r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default CharSerch;","import CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSerch from \"../charSerch/CharSerch\";\r\n\r\nimport './charInfoblock.scss'\r\n\r\n\r\nconst CharInfoBlock = (props) => {\r\n    return (\r\n        <div className=\"char__block-info\">\r\n            <CharInfo {...props} />\r\n            <CharSerch />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharInfoBlock;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfoBlock from \"../charInfoBlock/CharInfoBlock\";\r\nimport { useState } from \"react\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport { motion } from \"framer-motion/dist/framer-motion\";\r\nimport { Helmet } from 'react-helmet'\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\n\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setSelectedChar] = useState(null)\r\n\r\n    const onSelectedChar = (id) => {\r\n        setSelectedChar(id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <motion.div\r\n                initial={{ width: 0 }}\r\n                animate={{ width: '100%' }}\r\n                exit={{ x: window.innerWidth, transition: { duration: 0.1 } }}\r\n            >\r\n                <ErrorBoundary>\r\n                    <RandomChar />\r\n                </ErrorBoundary>\r\n                <div className=\"char__content\"\r\n                    focus={1}\r\n                >\r\n                    <ErrorBoundary>\r\n                        <CharList onSelectedChar={onSelectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharInfoBlock charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                </div>\r\n                <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n            </motion.div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/13315300_5203299.ce293654.jpg\";","import img from './13315300_5203299.jpg'\r\n\r\nimport './errorMessenge.css'\r\n\r\n\r\n\r\n\r\nconst ErrorMessenge = () => {\r\n    return (\r\n        <img src={img} alt=\"Error\" className=\"error-img\" />\r\n    )\r\n}\r\n\r\n\r\nexport default ErrorMessenge;","import { useState, useCallback } from \"react\"\r\n\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting')\r\n\r\n\r\n    const request = useCallback(async (url, method = \"GET\", body = null, headers = { \"Content-Type\": \"aplication/json\" }) => {\r\n\r\n        setLoading(true);\r\n        setProcess('loading');\r\n        try {\r\n            const response = await fetch(url, { method, headers, body });\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            setProcess('error')\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('loading');\r\n    }, [])\r\n\r\n    return { request, loading, error, clearError, process, setProcess }\r\n}\r\n\r\n\r\nexport default useHttp;","import { useHttp } from \"../components/hooks/http.hook\"\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError, process, setProcess } = useHttp();\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    // const _apiKey = 'apikey=f63df0e0ac6280a04a78500411b53931';\r\n    // const _apiKey = 'apikey=7dae8a44fd3de105d0687f0c9cff2944';\r\n    const _apiKey = 'apikey=e3432be01e1b4538a1a106d69d953f2d';\r\n    const _baseOffSet = 200;\r\n    const _baseOffSetCom = 300;\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffSet) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\r\n        clearError()\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?/&${_apiKey}`)\r\n        clearError()\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getAllComics = async (offset = _baseOffSetCom) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`)\r\n        clearError()\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?/&${_apiKey}`)\r\n        clearError()\r\n        return _transformComics(res.data.results[0])\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items,\r\n            comicsUrls: char.comics.items.resourceURI,\r\n        }\r\n    }\r\n\r\n    const _transformComics = (item) => {\r\n        return {\r\n            name: item.title,\r\n            description: item.description || \"There is no description\",\r\n            pageCount: item.pageCount\r\n                ? `${item.pageCount} pages`\r\n                : \"No information about the number of pages\",\r\n            language: item.textObjects[0]?.language || \"en-us\",\r\n            thumbnail: item.thumbnail.path + '.' + item.thumbnail.extension || null,\r\n            price: item.prices[0].price ? `${item.prices[0].price} €` : \"not available\",\r\n            id: item.id\r\n        }\r\n    }\r\n    return {\r\n        loading,\r\n        error,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        clearError,\r\n        getAllComics,\r\n        getComic,\r\n        getCharacterByName,\r\n        process,\r\n        setProcess\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n// ___________","import { Component } from \"react\";\r\nimport ErrorMessenge from \"../errorMessenge/errorMessenge\";\r\n\r\n\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({ error: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return (\r\n                <ErrorMessenge />\r\n            )\r\n        }\r\n        return (\r\n            this.props.children\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;"],"sourceRoot":""}